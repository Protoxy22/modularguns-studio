<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/net/modularmods/ui/ContentPackPanel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/net/modularmods/ui/ContentPackPanel.java" />
              <option name="originalContent" value="package net.modularmods.ui;&#10;&#10;import imgui.ImGui;&#10;import imgui.flag.ImGuiTreeNodeFlags;&#10;import imgui.type.ImString;&#10;import lombok.Getter;&#10;import lombok.Setter;&#10;import net.modularmods.model.GunPack;&#10;import net.modularmods.model.ModelEvent;&#10;import net.modularmods.model.ModelObserver;&#10;import net.modularmods.service.ProjectService;&#10;&#10;import java.util.List;&#10;&#10;/**&#10; * Content Pack Management panel for managing gun packs and content&#10; */&#10;@Getter&#10;@Setter&#10;public class ContentPackPanel implements ModelObserver {&#10;    private final ProjectService projectService;&#10;    private final ImString newPackName = new ImString(256);&#10;    private boolean showCreateDialog = false;&#10;&#10;    public ContentPackPanel(ProjectService projectService) {&#10;        this.projectService = projectService;&#10;    }&#10;&#10;    public void render() {&#10;        if (ImGui.begin(&quot;Content Packs&quot;)) {&#10;            renderToolbar();&#10;            ImGui.separator();&#10;            renderContentPacks();&#10;&#10;            if (showCreateDialog) {&#10;                renderCreatePackDialog();&#10;            }&#10;        }&#10;        ImGui.end();&#10;    }&#10;&#10;    private void renderToolbar() {&#10;        if (ImGui.button(&quot;New Pack&quot;)) {&#10;            showCreateDialog = true;&#10;            newPackName.set(&quot;&quot;);&#10;        }&#10;&#10;        ImGui.sameLine();&#10;        if (ImGui.button(&quot;Import Pack&quot;)) {&#10;            // TODO: Show file dialog for importing content packs&#10;        }&#10;&#10;        ImGui.sameLine();&#10;        if (ImGui.button(&quot;Export Pack&quot;)) {&#10;            // TODO: Export selected pack&#10;        }&#10;    }&#10;&#10;    private void renderContentPacks() {&#10;        if (projectService.getCurrentProject() == null) {&#10;            ImGui.textColored(0.7f, 0.7f, 0.7f, 1.0f, &quot;No project loaded&quot;);&#10;            return;&#10;        }&#10;&#10;        List&lt;GunPack&gt; packs = projectService.getCurrentProject().getGunPacks();&#10;&#10;        if (packs.isEmpty()) {&#10;            ImGui.textColored(0.7f, 0.7f, 0.7f, 1.0f, &quot;No content packs found&quot;);&#10;            return;&#10;        }&#10;&#10;        for (GunPack pack : packs) {&#10;            int flags = ImGuiTreeNodeFlags.OpenOnArrow | ImGuiTreeNodeFlags.OpenOnDoubleClick;&#10;&#10;            if (ImGui.treeNodeEx(pack.getName(), flags)) {&#10;                ImGui.indent();&#10;&#10;                // Pack info&#10;//                ImGui.text(&quot;Version: &quot; + pack.getVersion());&#10;                ImGui.text(&quot;Guns: &quot; + pack.getGuns().size());&#10;&#10;                // Gun list&#10;                if (ImGui.treeNode(&quot;Guns&quot;)) {&#10;                    pack.getGuns().forEach(gun -&gt; {&#10;                        if (ImGui.selectable(gun.getName())) {&#10;                            // TODO: Select gun for editing&#10;                        }&#10;&#10;                        if (ImGui.beginPopupContextItem()) {&#10;                            if (ImGui.menuItem(&quot;Edit&quot;)) {&#10;                                // TODO: Open gun editor&#10;                            }&#10;                            if (ImGui.menuItem(&quot;Duplicate&quot;)) {&#10;                                // TODO: Duplicate gun&#10;                            }&#10;                            if (ImGui.menuItem(&quot;Delete&quot;)) {&#10;                                // TODO: Delete gun&#10;                            }&#10;                            ImGui.endPopup();&#10;                        }&#10;                    });&#10;                    ImGui.treePop();&#10;                }&#10;&#10;                ImGui.unindent();&#10;                ImGui.treePop();&#10;            }&#10;&#10;            // Pack context menu&#10;            if (ImGui.beginPopupContextItem()) {&#10;                if (ImGui.menuItem(&quot;Rename&quot;)) {&#10;                    // TODO: Rename pack&#10;                }&#10;                if (ImGui.menuItem(&quot;Delete&quot;)) {&#10;                    // TODO: Delete pack&#10;                }&#10;                if (ImGui.menuItem(&quot;Export&quot;)) {&#10;                    // TODO: Export pack&#10;                }&#10;                ImGui.endPopup();&#10;            }&#10;        }&#10;    }&#10;&#10;    private void renderCreatePackDialog() {&#10;        if (ImGui.beginPopupModal(&quot;Create New Content Pack&quot;)) {&#10;            ImGui.text(&quot;Enter pack name:&quot;);&#10;            ImGui.inputText(&quot;##packname&quot;, newPackName);&#10;&#10;            ImGui.separator();&#10;&#10;            if (ImGui.button(&quot;Create&quot;)) {&#10;                if (!newPackName.get().trim().isEmpty()) {&#10;                    // TODO: Create new pack&#10;                    showCreateDialog = false;&#10;                    ImGui.closeCurrentPopup();&#10;                }&#10;            }&#10;&#10;            ImGui.sameLine();&#10;            if (ImGui.button(&quot;Cancel&quot;)) {&#10;                showCreateDialog = false;&#10;                ImGui.closeCurrentPopup();&#10;            }&#10;&#10;            ImGui.endPopup();&#10;        }&#10;&#10;        if (showCreateDialog) {&#10;            ImGui.openPopup(&quot;Create New Content Pack&quot;);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onModelChanged(ModelEvent event) {&#10;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package net.modularmods.ui;&#10;&#10;import imgui.ImGui;&#10;import imgui.flag.ImGuiTreeNodeFlags;&#10;import imgui.type.ImString;&#10;import lombok.Getter;&#10;import lombok.Setter;&#10;import net.modularmods.model.GunPack;&#10;import net.modularmods.model.ModelEvent;&#10;import net.modularmods.model.ModelObserver;&#10;import net.modularmods.service.ProjectService;&#10;&#10;import java.util.List;&#10;&#10;/**&#10; * Content Pack Management panel for managing gun packs and content&#10; */&#10;@Getter&#10;@Setter&#10;public class ContentPackPanel implements ModelObserver {&#10;    private final ProjectService projectService;&#10;    private final ImString newPackName = new ImString(256);&#10;    private boolean showCreateDialog = false;&#10;&#10;    public ContentPackPanel(ProjectService projectService) {&#10;        this.projectService = projectService;&#10;    }&#10;&#10;    public void render() {&#10;        if (ImGui.begin(&quot;Content Packs&quot;)) {&#10;            renderToolbar();&#10;            ImGui.separator();&#10;            renderContentPacks();&#10;&#10;            if (showCreateDialog) {&#10;                renderCreatePackDialog();&#10;            }&#10;        }&#10;        ImGui.end();&#10;    }&#10;&#10;    private void renderToolbar() {&#10;        if (ImGui.button(&quot;New Pack&quot;)) {&#10;            showCreateDialog = true;&#10;            newPackName.set(&quot;&quot;);&#10;        }&#10;&#10;        ImGui.sameLine();&#10;        if (ImGui.button(&quot;Import Pack&quot;)) {&#10;            // TODO: Show file dialog for importing content packs&#10;        }&#10;&#10;        ImGui.sameLine();&#10;        if (ImGui.button(&quot;Export Pack&quot;)) {&#10;            // TODO: Export selected pack&#10;        }&#10;    }&#10;&#10;    private void renderContentPacks() {&#10;        if (projectService.getCurrentProject() == null) {&#10;            ImGui.textColored(0.7f, 0.7f, 0.7f, 1.0f, &quot;No project loaded&quot;);&#10;            return;&#10;        }&#10;&#10;        List&lt;GunPack&gt; packs = projectService.getCurrentProject().getGunPacks();&#10;&#10;        if (packs.isEmpty()) {&#10;            ImGui.textColored(0.7f, 0.7f, 0.7f, 1.0f, &quot;No content packs found&quot;);&#10;            return;&#10;        }&#10;&#10;        for (GunPack pack : packs) {&#10;            int flags = ImGuiTreeNodeFlags.OpenOnArrow | ImGuiTreeNodeFlags.OpenOnDoubleClick;&#10;&#10;            if (ImGui.treeNodeEx(pack.getName(), flags)) {&#10;                ImGui.indent();&#10;&#10;                // Pack info&#10;//                ImGui.text(&quot;Version: &quot; + pack.getVersion()); // GunPack doesn't have version field&#10;                ImGui.text(&quot;Guns: &quot; + pack.getGuns().size());&#10;&#10;                // Gun list&#10;                if (ImGui.treeNode(&quot;Guns&quot;)) {&#10;                    pack.getGuns().forEach(gun -&gt; {&#10;                        if (ImGui.selectable(gun.getName())) {&#10;                            // TODO: Select gun for editing&#10;                        }&#10;&#10;                        if (ImGui.beginPopupContextItem()) {&#10;                            if (ImGui.menuItem(&quot;Edit&quot;)) {&#10;                                // TODO: Open gun editor&#10;                            }&#10;                            if (ImGui.menuItem(&quot;Duplicate&quot;)) {&#10;                                // TODO: Duplicate gun&#10;                            }&#10;                            if (ImGui.menuItem(&quot;Delete&quot;)) {&#10;                                // TODO: Delete gun&#10;                            }&#10;                            ImGui.endPopup();&#10;                        }&#10;                    });&#10;                    ImGui.treePop();&#10;                }&#10;&#10;                ImGui.unindent();&#10;                ImGui.treePop();&#10;            }&#10;&#10;            // Pack context menu&#10;            if (ImGui.beginPopupContextItem()) {&#10;                if (ImGui.menuItem(&quot;Rename&quot;)) {&#10;                    // TODO: Rename pack&#10;                }&#10;                if (ImGui.menuItem(&quot;Delete&quot;)) {&#10;                    // TODO: Delete pack&#10;                }&#10;                if (ImGui.menuItem(&quot;Export&quot;)) {&#10;                    // TODO: Export pack&#10;                }&#10;                ImGui.endPopup();&#10;            }&#10;        }&#10;    }&#10;&#10;    private void renderCreatePackDialog() {&#10;        if (ImGui.beginPopupModal(&quot;Create New Content Pack&quot;)) {&#10;            ImGui.text(&quot;Enter pack name:&quot;);&#10;            ImGui.inputText(&quot;##packname&quot;, newPackName);&#10;&#10;            ImGui.separator();&#10;&#10;            if (ImGui.button(&quot;Create&quot;)) {&#10;                if (!newPackName.get().trim().isEmpty()) {&#10;                    // TODO: Create new pack&#10;                    showCreateDialog = false;&#10;                    ImGui.closeCurrentPopup();&#10;                }&#10;            }&#10;&#10;            ImGui.sameLine();&#10;            if (ImGui.button(&quot;Cancel&quot;)) {&#10;                showCreateDialog = false;&#10;                ImGui.closeCurrentPopup();&#10;            }&#10;&#10;            ImGui.endPopup();&#10;        }&#10;&#10;        if (showCreateDialog) {&#10;            ImGui.openPopup(&quot;Create New Content Pack&quot;);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onModelChanged(ModelEvent event) {&#10;        // Handle model changes if needed&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/net/modularmods/ui/TemplatesPanel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/net/modularmods/ui/TemplatesPanel.java" />
              <option name="originalContent" value="package net.modularmods.ui;&#10;&#10;import imgui.ImGui;&#10;import imgui.flag.ImGuiTreeNodeFlags;&#10;import lombok.Getter;&#10;import lombok.Setter;&#10;import net.modularmods.model.ModelEvent;&#10;import net.modularmods.model.ModelObserver;&#10;import net.modularmods.service.ProjectService;&#10;&#10;/**&#10; * Templates panel for managing gun templates and presets&#10; */&#10;@Getter&#10;@Setter&#10;public class TemplatesPanel implements ModelObserver {&#10;    private final ProjectService projectService;&#10;&#10;    // Template categories&#10;    private final String[] templateCategories = {&#10;        &quot;Assault Rifles&quot;, &quot;Pistols&quot;, &quot;Shotguns&quot;, &quot;Sniper Rifles&quot;,&#10;        &quot;SMGs&quot;, &quot;LMGs&quot;, &quot;Explosives&quot;, &quot;Melee&quot;, &quot;Custom&quot;&#10;    };&#10;&#10;    public TemplatesPanel(ProjectService projectService) {&#10;        this.projectService = projectService;&#10;    }&#10;&#10;    public void render() {&#10;        if (ImGui.begin(&quot;Templates&quot;)) {&#10;            renderToolbar();&#10;            ImGui.separator();&#10;            renderTemplateCategories();&#10;        }&#10;        ImGui.end();&#10;    }&#10;&#10;    private void renderToolbar() {&#10;        if (ImGui.button(&quot;New Template&quot;)) {&#10;            // TODO: Create new template from current gun&#10;        }&#10;&#10;        ImGui.sameLine();&#10;        if (ImGui.button(&quot;Import&quot;)) {&#10;            // TODO: Import template from file&#10;        }&#10;&#10;        ImGui.sameLine();&#10;        if (ImGui.button(&quot;Refresh&quot;)) {&#10;            // TODO: Refresh template list&#10;        }&#10;    }&#10;&#10;    private void renderTemplateCategories() {&#10;        if (projectService.getCurrentProject() == null) {&#10;            ImGui.textColored(0.7f, 0.7f, 0.7f, 1.0f, &quot;No project loaded&quot;);&#10;            return;&#10;        }&#10;&#10;        for (String category : templateCategories) {&#10;            renderTemplateCategory(category);&#10;        }&#10;    }&#10;&#10;    private void renderTemplateCategory(String categoryName) {&#10;        int flags = ImGuiTreeNodeFlags.OpenOnArrow | ImGuiTreeNodeFlags.OpenOnDoubleClick;&#10;&#10;        if (ImGui.treeNodeEx(categoryName, flags)) {&#10;            ImGui.indent();&#10;&#10;            // For now, show placeholder templates&#10;            String[] templates = getTemplatesForCategory(categoryName);&#10;&#10;            if (templates.length == 0) {&#10;                ImGui.textColored(0.6f, 0.6f, 0.6f, 1.0f, &quot;No templates&quot;);&#10;            } else {&#10;                for (String template : templates) {&#10;                    if (ImGui.selectable(template)) {&#10;                        // TODO: Apply template to current gun&#10;                    }&#10;&#10;                    if (ImGui.beginPopupContextItem()) {&#10;                        if (ImGui.menuItem(&quot;Apply to Current&quot;)) {&#10;                            // TODO: Apply template to current gun&#10;                        }&#10;                        if (ImGui.menuItem(&quot;Create Gun from Template&quot;)) {&#10;                            // TODO: Create new gun from template&#10;                        }&#10;                        ImGui.separator();&#10;                        if (ImGui.menuItem(&quot;Edit Template&quot;)) {&#10;                            // TODO: Edit template&#10;                        }&#10;                        if (ImGui.menuItem(&quot;Delete Template&quot;)) {&#10;                            // TODO: Delete template&#10;                        }&#10;                        ImGui.endPopup();&#10;                    }&#10;                }&#10;            }&#10;&#10;            ImGui.unindent();&#10;            ImGui.treePop();&#10;        }&#10;    }&#10;&#10;    private String[] getTemplatesForCategory(String category) {&#10;        // Placeholder templates - in a real implementation,&#10;        // these would come from the project or template service&#10;        switch (category) {&#10;            case &quot;Assault Rifles&quot;:&#10;                return new String[]{&quot;AK-47 Template&quot;, &quot;M4A1 Template&quot;, &quot;SCAR Template&quot;};&#10;            case &quot;Pistols&quot;:&#10;                return new String[]{&quot;Glock Template&quot;, &quot;1911 Template&quot;, &quot;Desert Eagle Template&quot;};&#10;            case &quot;Shotguns&quot;:&#10;                return new String[]{&quot;Pump Action Template&quot;, &quot;Auto Shotgun Template&quot;};&#10;            case &quot;Sniper Rifles&quot;:&#10;                return new String[]{&quot;Bolt Action Template&quot;, &quot;Semi-Auto Template&quot;};&#10;            case &quot;SMGs&quot;:&#10;                return new String[]{&quot;MP5 Template&quot;, &quot;UZI Template&quot;};&#10;            case &quot;LMGs&quot;:&#10;                return new String[]{&quot;M249 Template&quot;, &quot;PKM Template&quot;};&#10;            case &quot;Explosives&quot;:&#10;                return new String[]{&quot;Grenade Launcher Template&quot;, &quot;Rocket Launcher Template&quot;};&#10;            case &quot;Melee&quot;:&#10;                return new String[]{&quot;Knife Template&quot;, &quot;Sword Template&quot;};&#10;            case &quot;Custom&quot;:&#10;                return new String[]{}; // User-created templates&#10;            default:&#10;                return new String[]{};&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onModelChange(ModelEvent event) {&#10;        // Handle model changes if needed&#10;        // Could refresh template list based on project changes&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package net.modularmods.ui;&#10;&#10;import imgui.ImGui;&#10;import imgui.flag.ImGuiTreeNodeFlags;&#10;import lombok.Getter;&#10;import lombok.Setter;&#10;import net.modularmods.model.ModelEvent;&#10;import net.modularmods.model.ModelObserver;&#10;import net.modularmods.service.ProjectService;&#10;&#10;/**&#10; * Templates panel for managing gun templates and presets&#10; */&#10;@Getter&#10;@Setter&#10;public class TemplatesPanel implements ModelObserver {&#10;    private final ProjectService projectService;&#10;&#10;    // Template categories&#10;    private final String[] templateCategories = {&#10;        &quot;Assault Rifles&quot;, &quot;Pistols&quot;, &quot;Shotguns&quot;, &quot;Sniper Rifles&quot;,&#10;        &quot;SMGs&quot;, &quot;LMGs&quot;, &quot;Explosives&quot;, &quot;Melee&quot;, &quot;Custom&quot;&#10;    };&#10;&#10;    public TemplatesPanel(ProjectService projectService) {&#10;        this.projectService = projectService;&#10;    }&#10;&#10;    public void render() {&#10;        if (ImGui.begin(&quot;Templates&quot;)) {&#10;            renderToolbar();&#10;            ImGui.separator();&#10;            renderTemplateCategories();&#10;        }&#10;        ImGui.end();&#10;    }&#10;&#10;    private void renderToolbar() {&#10;        if (ImGui.button(&quot;New Template&quot;)) {&#10;            // TODO: Create new template from current gun&#10;        }&#10;&#10;        ImGui.sameLine();&#10;        if (ImGui.button(&quot;Import&quot;)) {&#10;            // TODO: Import template from file&#10;        }&#10;&#10;        ImGui.sameLine();&#10;        if (ImGui.button(&quot;Refresh&quot;)) {&#10;            // TODO: Refresh template list&#10;        }&#10;    }&#10;&#10;    private void renderTemplateCategories() {&#10;        if (projectService.getCurrentProject() == null) {&#10;            ImGui.textColored(0.7f, 0.7f, 0.7f, 1.0f, &quot;No project loaded&quot;);&#10;            return;&#10;        }&#10;&#10;        for (String category : templateCategories) {&#10;            renderTemplateCategory(category);&#10;        }&#10;    }&#10;&#10;    private void renderTemplateCategory(String categoryName) {&#10;        int flags = ImGuiTreeNodeFlags.OpenOnArrow | ImGuiTreeNodeFlags.OpenOnDoubleClick;&#10;&#10;        if (ImGui.treeNodeEx(categoryName, flags)) {&#10;            ImGui.indent();&#10;&#10;            // For now, show placeholder templates&#10;            String[] templates = getTemplatesForCategory(categoryName);&#10;&#10;            if (templates.length == 0) {&#10;                ImGui.textColored(0.6f, 0.6f, 0.6f, 1.0f, &quot;No templates&quot;);&#10;            } else {&#10;                for (String template : templates) {&#10;                    if (ImGui.selectable(template)) {&#10;                        // TODO: Apply template to current gun&#10;                    }&#10;&#10;                    if (ImGui.beginPopupContextItem()) {&#10;                        if (ImGui.menuItem(&quot;Apply to Current&quot;)) {&#10;                            // TODO: Apply template to current gun&#10;                        }&#10;                        if (ImGui.menuItem(&quot;Create Gun from Template&quot;)) {&#10;                            // TODO: Create new gun from template&#10;                        }&#10;                        ImGui.separator();&#10;                        if (ImGui.menuItem(&quot;Edit Template&quot;)) {&#10;                            // TODO: Edit template&#10;                        }&#10;                        if (ImGui.menuItem(&quot;Delete Template&quot;)) {&#10;                            // TODO: Delete template&#10;                        }&#10;                        ImGui.endPopup();&#10;                    }&#10;                }&#10;            }&#10;&#10;            ImGui.unindent();&#10;            ImGui.treePop();&#10;        }&#10;    }&#10;&#10;    private String[] getTemplatesForCategory(String category) {&#10;        // Placeholder templates - in a real implementation,&#10;        // these would come from the project or template service&#10;        switch (category) {&#10;            case &quot;Assault Rifles&quot;:&#10;                return new String[]{&quot;AK-47 Template&quot;, &quot;M4A1 Template&quot;, &quot;SCAR Template&quot;};&#10;            case &quot;Pistols&quot;:&#10;                return new String[]{&quot;Glock Template&quot;, &quot;1911 Template&quot;, &quot;Desert Eagle Template&quot;};&#10;            case &quot;Shotguns&quot;:&#10;                return new String[]{&quot;Pump Action Template&quot;, &quot;Auto Shotgun Template&quot;};&#10;            case &quot;Sniper Rifles&quot;:&#10;                return new String[]{&quot;Bolt Action Template&quot;, &quot;Semi-Auto Template&quot;};&#10;            case &quot;SMGs&quot;:&#10;                return new String[]{&quot;MP5 Template&quot;, &quot;UZI Template&quot;};&#10;            case &quot;LMGs&quot;:&#10;                return new String[]{&quot;M249 Template&quot;, &quot;PKM Template&quot;};&#10;            case &quot;Explosives&quot;:&#10;                return new String[]{&quot;Grenade Launcher Template&quot;, &quot;Rocket Launcher Template&quot;};&#10;            case &quot;Melee&quot;:&#10;                return new String[]{&quot;Knife Template&quot;, &quot;Sword Template&quot;};&#10;            case &quot;Custom&quot;:&#10;                return new String[]{}; // User-created templates&#10;            default:&#10;                return new String[]{};&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onModelChanged(ModelEvent event) {&#10;        // Handle model changes if needed&#10;        // Could refresh template list based on project changes&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>